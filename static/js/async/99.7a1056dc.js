"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["99"],{8796:function(n,e,r){r.r(e),r.d(e,{default:function(){return c}});var t=r(5893),i=r(65);function a(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ul:"ul",li:"li",pre:"pre",code:"code",h3:"h3",ol:"ol"},(0,i.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.h1,{id:"tinypng-wasm",children:["TinyPNG-WASM",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#tinypng-wasm",children:"#"})]}),"\n",(0,t.jsxs)(e.h2,{id:"介绍",children:["介绍",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#介绍",children:"#"})]}),"\n",(0,t.jsxs)(e.p,{children:["本项目是使用rust编写功能类似于",(0,t.jsx)(e.a,{href:"https://tinypng.com/",target:"_blank",rel:"noopener noreferrer",children:"tinypng"}),"，将Rust打包成wasm的npm包，用于压缩图片，压缩后图片体积会减少，但是图片质量会下降。"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"优点：使用客户端压缩图片，减少服务器压力，同时减少图片上传时间。"}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:["npm：",(0,t.jsx)(e.a,{href:"https://www.npmjs.com/package/tinypng-lib-wasm",target:"_blank",rel:"noopener noreferrer",children:"tinypng-lib-wasm"})]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:["在线体验地址：",(0,t.jsx)(e.a,{href:"https://tinypng.wcrane.cn/example",target:"_blank",rel:"noopener noreferrer",children:(0,t.jsx)(e.a,{href:"https://tinypng.wcrane.cn/example",target:"_blank",rel:"noopener noreferrer",children:"https://tinypng.wcrane.cn/example"})})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.h2,{id:"编译",children:["编译",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编译",children:"#"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"wasm-pack build -t bundler\n"})}),"\n",(0,t.jsxs)(e.h3,{id:"接入",children:["接入",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#接入",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"有两种方式接入："}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:["使用封装好的npm包 ",(0,t.jsx)(e.a,{href:"https://github.com/viteui/tinypng-lib",target:"_blank",rel:"noopener noreferrer",children:"tinypng-lib"})]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"支持主线程压缩"}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"支持webworker压缩"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:"如果想自己基于wasm封装，可以参考下面的案例"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"<template>\n  <div id=\"app\">\n    <input type=\"file\" @input=\"uploadImg\" />\n    <img :src=\"imgUrl\" alt=\"\">\n  </div>\n</template>\n\n<script>\nimport { ImagequantImage, Imagequant } from 'tinypng-lib-wasm'\n\nfunction padArrayBuffer(buffer) {\n  const padding = buffer.byteLength % 4;\n  if (padding === 0) return buffer;\n\n  const paddingBytes = 4 - padding;\n  const paddedBuffer = new ArrayBuffer(buffer.byteLength + paddingBytes);\n  const paddedView = new Uint8Array(paddedBuffer);\n  paddedView.set(new Uint8Array(buffer));\n  // 填充额外的字节为0\n  for (let i = buffer.byteLength; i < paddedBuffer.byteLength; i++) {\n    paddedView[i] = 0;\n  }\n  return paddedBuffer;\n}\n// 获取图片信息：宽、高、像素数据、图片大小\nconst getImageData = (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    // 创建一个 Image 对象\n    const img = new Image();\n    img.src = URL.createObjectURL(file);\n\n    img.onload = () => {\n      // 创建一个 canvas 元素\n      const canvas = document.createElement('canvas');\n      canvas.width = img.width;\n      canvas.height = img.height;\n      const ctx = canvas.getContext('2d');\n\n      if (!ctx) {\n        reject(new Error('无法获取 canvas 上下文'));\n        return;\n      }\n\n      // 将图像绘制到 canvas 上\n      ctx.drawImage(img, 0, 0);\n\n      // 获取 ImageData\n      const imageData = ctx.getImageData(0, 0, img.width, img.height);\n      const data = imageData.data; // Uint8ClampedArray\n\n      // 将 Uint8ClampedArray 转换为普通的 Uint8Array\n      const buffer = new Uint8Array(data).buffer;\n\n      // 确保缓冲区长度是 width * height * 4\n      const expectedLength = img.width * img.height * 4;\n      if (buffer.byteLength !== expectedLength) {\n        reject(new Error(`缓冲区长度不匹配：期望 ${expectedLength} 字节，但得到 ${buffer.byteLength} 字节`));\n        return;\n      }\n\n      resolve({\n        buffer,\n        width: img.width,\n        height: img.height,\n        size: file.size\n      });\n\n      // 释放对象 URL\n      URL.revokeObjectURL(img.src);\n    };\n\n    img.onerror = () => {\n      reject(new Error('图片加载失败'));\n      URL.revokeObjectURL(img.src);\n    };\n  });\n};\n\nexport default {\n  name: 'App',\n  components: {\n  },\n  data() {\n    return {\n      imgUrl: ''\n    }\n  },\n  methods: {\n    uploadImg(e) {\n      const file = e.target.files[0]\n      getImageData(file).then(async ({\n        buffer,\n        width,\n        height,\n        size\n      }) => {\n        // 将 Uint8Array 数据从发给 Imagequant/WASM\n        const uint8Array = new Uint8Array(buffer)\n        console.log('uint8Array', buffer, uint8Array, width, height)\n        // buffer 转图片\n\n\n        const image = new ImagequantImage(uint8Array, width, height, 0)\n        const instance = new Imagequant()\n        // 配置压缩质量\n        instance.set_quality(30, 50)\n        console.log('set_quality', instance, image)\n        try {\n          console.time('压缩时间')\n          // 启动压缩\n          const output = instance.process(image);\n          // console.log('output', output)\n          const blob = new Blob([output], { type: 'image/png' })\n          const url = URL.createObjectURL(blob)\n          const img = new Image()\n          this.imgUrl = url;\n          img.src = url;\n          // 压缩后图片文件大小\n          console.timeEnd('压缩时间')\n          console.log('压缩后大小', blob.size, \"压缩之前\", size, \"压缩比率\", `${((blob.size / size) * 100).toFixed(2)}%`)\n        } catch (error) {\n          console.log('error', error)\n        }\n      })\n    }\n  }\n}\n<\/script>\n"})}),"\n",(0,t.jsxs)(e.h2,{id:"注意",children:["注意",(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#注意",children:"#"})]}),"\n",(0,t.jsx)(e.p,{children:"本项目使用rust编写，需要安装rust环境，具体安装方法可以参考rust官方文档。"})]})}function s(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(a,{...n})}):a(n)}let c=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["guide%2Fwasm.md"]={toc:[{text:"介绍",id:"介绍",depth:2},{text:"编译",id:"编译",depth:2},{text:"接入",id:"接入",depth:3},{text:"注意",id:"注意",depth:2}],title:"TinyPNG-WASM",frontmatter:{}}}}]);